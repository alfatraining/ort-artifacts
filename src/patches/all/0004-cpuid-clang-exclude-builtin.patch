diff --git a/cmake/onnxruntime_mlas.cmake b/cmake/onnxruntime_mlas.cmake
index 3530ab03c..b1a7e8347 100644
--- a/cmake/onnxruntime_mlas.cmake
+++ b/cmake/onnxruntime_mlas.cmake
@@ -437,7 +437,7 @@ else()
         endif()
         set_source_files_properties(${MLAS_SRC_DIR}/sqnbitgemm_kernel_neon_int8.cpp
                                     PROPERTIES COMPILE_FLAGS " -march=armv8.2-a+dotprod")
-        set_source_files_properties(${MLAS_SRC_DIR}/sqnbitgemm_kernel_neon_int8_i8mm.cpp 
+        set_source_files_properties(${MLAS_SRC_DIR}/sqnbitgemm_kernel_neon_int8_i8mm.cpp
 				    PROPERTIES COMPILE_FLAGS " -march=armv8.2-a+i8mm ")
 
         if (NOT APPLE)
@@ -655,7 +655,7 @@ else()
           ${MLAS_SRC_DIR}/rotary_embedding_kernel_avx2.cpp
           ${MLAS_SRC_DIR}/rotary_embedding_kernel_avx2.cpp
         )
-        if(CMAKE_CXX_COMPILER_VERSION GREATER_EQUAL 13.1 AND NOT(APPLE))
+        if(CMAKE_CXX_COMPILER_VERSION GREATER_EQUAL 13.1 AND NOT(APPLE) AND NOT (CMAKE_CXX_COMPILER_ID MATCHES "Clang"))
           set(mlas_platform_srcs_avx2
             ${mlas_platform_srcs_avx2}
             ${MLAS_SRC_DIR}/x86_64/cvtfp16Avx.S
diff --git a/onnxruntime/core/common/cpuid_info.cc b/onnxruntime/core/common/cpuid_info.cc
index 6c66047b4..3b96b9f66 100644
--- a/onnxruntime/core/common/cpuid_info.cc
+++ b/onnxruntime/core/common/cpuid_info.cc
@@ -159,7 +159,7 @@ void CPUIDInfo::X86Init() {
         CheckIntelResult check_intel = CheckIntel();
         if (check_intel.is_intel) {
 #ifdef __linux__
-#if !defined(__ANDROID__)
+#if !defined(__ANDROID__) && !defined(__clang__)
           has_tpause_ = __builtin_cpu_supports("waitpkg") != 0;
 #endif
 #else
diff --git a/onnxruntime/core/common/spin_pause.cc b/onnxruntime/core/common/spin_pause.cc
index 329f3f125..1b1c681c3 100644
--- a/onnxruntime/core/common/spin_pause.cc
+++ b/onnxruntime/core/common/spin_pause.cc
@@ -30,11 +30,11 @@ void SpinPause() {
     !defined(__APPLE__)
 
   static const bool has_tpause = CPUIDInfo::GetCPUIDInfo().HasTPAUSE();
-  static constexpr uint64_t tpause_spin_delay_cycles = 1000;
+  [[maybe_unused]] static constexpr uint64_t tpause_spin_delay_cycles = 1000;
   if (has_tpause) {
 #if defined(_WIN32)
     _tpause(0x0, __rdtsc() + tpause_spin_delay_cycles);
-#elif defined(__linux__)
+#elif defined(__linux__) && !defined(__clang__)
     __builtin_ia32_tpause(0x0, __rdtsc() + tpause_spin_delay_cycles);
 #else
     _mm_pause();
