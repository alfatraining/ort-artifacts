diff --git a/cmake/onnxruntime_providers_openvino.cmake b/cmake/onnxruntime_providers_openvino.cmake
index 03f67983c..627ae20b1 100644
--- a/cmake/onnxruntime_providers_openvino.cmake
+++ b/cmake/onnxruntime_providers_openvino.cmake
@@ -51,12 +51,13 @@
 
   if(NOT MSVC)
     target_compile_options(onnxruntime_providers_openvino PRIVATE "-Wno-parentheses")
+    target_compile_options(onnxruntime_providers_openvino PRIVATE "-Wno-free-nonheap-object")
   endif()
   add_dependencies(onnxruntime_providers_openvino onnxruntime_providers_shared ${onnxruntime_EXTERNAL_DEPENDENCIES})
   target_include_directories(onnxruntime_providers_openvino SYSTEM PUBLIC ${ONNXRUNTIME_ROOT} ${CMAKE_CURRENT_BINARY_DIR} ${OpenVINO_INCLUDE_DIR} ${OPENVINO_INCLUDE_DIR_LIST} ${PYTHON_INCLUDE_DIRS} $ENV{OPENCL_INCS} $ENV{OPENCL_INCS}/../../cl_headers/)
   target_link_libraries(onnxruntime_providers_openvino ${ONNXRUNTIME_PROVIDERS_SHARED} Boost::mp11 ${OPENVINO_LIB_LIST} ${ABSEIL_LIBS} Eigen3::Eigen)
 
-  target_compile_definitions(onnxruntime_providers_openvino PRIVATE FILE_NAME=\"onnxruntime_providers_openvino.dll\")
+  target_compile_definitions(onnxruntime_providers_openvino PRIVATE FILE_NAME=\"onnxruntime_providers_openvino$<$<CONFIG:Debug>:Debug>.dll\")
 
   if(MSVC)
     target_compile_options(onnxruntime_providers_openvino PRIVATE /wd4099 /wd4275 /wd4100 /wd4005)
@@ -77,19 +78,113 @@
     message(FATAL_ERROR "onnxruntime_providers_openvino unknown platform, need to specify shared library exports for it")
   endif()
 
-  if (CMAKE_OPENVINO_LIBRARY_INSTALL_DIR)
+  if(WIN32 AND (NOT CMAKE_OPENVINO_LIBRARY_INSTALL_DIR))
     install(TARGETS onnxruntime_providers_openvino
             ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}
-            LIBRARY  DESTINATION ${CMAKE_OPENVINO_LIBRARY_INSTALL_DIR}
+            LIBRARY  DESTINATION ${CMAKE_INSTALL_BINDIR}
             RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR})
   else()
-    install(TARGETS onnxruntime_providers_openvino
-            ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}
-            LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}
-            RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR})
+    if (CMAKE_OPENVINO_LIBRARY_INSTALL_DIR)
+      install(TARGETS onnxruntime_providers_openvino
+              ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}
+              LIBRARY  DESTINATION ${CMAKE_OPENVINO_LIBRARY_INSTALL_DIR}
+              RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR})
+    else()
+      install(TARGETS onnxruntime_providers_openvino
+              ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}
+              LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}
+              RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR})
+    endif()
   endif()
 
 set_target_properties(onnxruntime_providers_openvino PROPERTIES
   MAP_IMPORTED_CONFIG_RELEASE RelWithDebInfo
   MAP_IMPORTED_CONFIG_DEBUG RelWithDebInfo
   )
+
+# fix rpath
+set_target_properties(onnxruntime_providers_openvino PROPERTIES
+  INSTALL_RPATH "$ORIGIN"
+  BUILD_RPATH "$ORIGIN"
+)
+
+# Install OpenVINO runtime libraries
+string(STRIP $ENV{INTEL_OPENVINO_DIR} OPENVINO_PATH_RAW)
+cmake_path(SET OPENVINO_PATH ${OPENVINO_PATH_RAW})
+
+# Map target architecture to OpenVINO architecture directory name
+if(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64|arm64|ARM64)$")
+  set(OPENVINO_ARCH "aarch64")
+elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(x86_64|AMD64)$")
+  set(OPENVINO_ARCH "intel64")
+else()
+  # Default fallback - to be reevaluated
+  set(OPENVINO_ARCH "intel64")
+endif()
+
+# Set library extension based on platform
+if(WIN32)
+  set(OPENVINO_LIB_EXTENSION "dll")
+elseif(APPLE)
+  set(OPENVINO_LIB_EXTENSION "dylib")
+else()
+  set(OPENVINO_LIB_EXTENSION "so")
+endif()
+
+# Determine build configuration subdirectory
+if((CMAKE_BUILD_TYPE MATCHES "Debug") OR ("Debug" IN_LIST CMAKE_CONFIGURATION_TYPES))
+  set(OPENVINO_BUILD_CONFIG "Debug")
+else()
+  set(OPENVINO_BUILD_CONFIG "Release")
+endif()
+
+# Find OpenVINO runtime libraries
+file(GLOB OPENVINO_RUNTIME_FILES
+  "${OPENVINO_PATH}/runtime/lib/${OPENVINO_ARCH}/*.${OPENVINO_LIB_EXTENSION}"
+  "${OPENVINO_PATH}/runtime/lib/${OPENVINO_ARCH}/*.${OPENVINO_LIB_EXTENSION}.*"
+  "${OPENVINO_PATH}/runtime/lib/${OPENVINO_ARCH}/${OPENVINO_BUILD_CONFIG}/*.${OPENVINO_LIB_EXTENSION}"
+  "${OPENVINO_PATH}/runtime/lib/${OPENVINO_ARCH}/${OPENVINO_BUILD_CONFIG}/*.${OPENVINO_LIB_EXTENSION}.*"
+  "${OPENVINO_PATH}/runtime/bin/${OPENVINO_ARCH}/*.${OPENVINO_LIB_EXTENSION}"
+  "${OPENVINO_PATH}/runtime/bin/${OPENVINO_ARCH}/*.${OPENVINO_LIB_EXTENSION}.*"
+  "${OPENVINO_PATH}/runtime/bin/${OPENVINO_ARCH}/${OPENVINO_BUILD_CONFIG}/*.${OPENVINO_LIB_EXTENSION}"
+  "${OPENVINO_PATH}/runtime/bin/${OPENVINO_ARCH}/${OPENVINO_BUILD_CONFIG}/*.${OPENVINO_LIB_EXTENSION}.*"
+)
+
+# Find TBB libraries
+file(GLOB OPENVINO_TBB_FILES
+  "${OPENVINO_PATH}/runtime/3rdparty/tbb/lib/${OPENVINO_ARCH}/*.${OPENVINO_LIB_EXTENSION}"
+  "${OPENVINO_PATH}/runtime/3rdparty/tbb/lib/${OPENVINO_ARCH}/*.${OPENVINO_LIB_EXTENSION}.*"
+  "${OPENVINO_PATH}/runtime/3rdparty/tbb/lib/*.${OPENVINO_LIB_EXTENSION}"
+  "${OPENVINO_PATH}/runtime/3rdparty/tbb/lib/*.${OPENVINO_LIB_EXTENSION}.*"
+  "${OPENVINO_PATH}/runtime/3rdparty/tbb/lib64/*.${OPENVINO_LIB_EXTENSION}"
+  "${OPENVINO_PATH}/runtime/3rdparty/tbb/lib64/*.${OPENVINO_LIB_EXTENSION}.*"
+  "${OPENVINO_PATH}/runtime/3rdparty/tbb/bin/${OPENVINO_ARCH}/*.${OPENVINO_LIB_EXTENSION}"
+  "${OPENVINO_PATH}/runtime/3rdparty/tbb/bin/${OPENVINO_ARCH}/*.${OPENVINO_LIB_EXTENSION}.*"
+  "${OPENVINO_PATH}/runtime/3rdparty/tbb/bin/*.${OPENVINO_LIB_EXTENSION}"
+  "${OPENVINO_PATH}/runtime/3rdparty/tbb/bin/*.${OPENVINO_LIB_EXTENSION}.*"
+)
+
+# For release builds, exclude debug files
+if(OPENVINO_BUILD_CONFIG STREQUAL "Release")
+  list(FILTER OPENVINO_RUNTIME_FILES EXCLUDE REGEX "_debug\\.${OPENVINO_LIB_EXTENSION}$")
+  list(FILTER OPENVINO_TBB_FILES EXCLUDE REGEX "_debug\\.${OPENVINO_LIB_EXTENSION}$")
+endif()
+
+# file(GLOB_RECURSE ALL_DAMN_OPENVINO_FILES LIST_DIRECTORIES true RELATIVE "${OPENVINO_PATH}" "${OPENVINO_PATH}/*")
+# message(FATAL_ERROR "OPENVINO STATIC: '${OPENVINO_PATH}', '${OPENVINO_RUNTIME_FILES}', '${OPENVINO_TBB_FILES}', '${ALL_DAMN_OPENVINO_FILES}'")
+
+# Install all found libraries
+if(OPENVINO_RUNTIME_FILES OR OPENVINO_TBB_FILES)
+  if(WIN32)
+    set(DESTDIR ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR})
+  else()
+    set(DESTDIR ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
+  endif()
+  file(INSTALL
+      ${OPENVINO_RUNTIME_FILES}
+      ${OPENVINO_TBB_FILES}
+      DESTINATION ${DESTDIR}
+  )
+else()
+  message(FATAL_ERROR "OpenVINO Debug: NO OPENVINO OR TBB FILES FOUND! OPENVINO_RUNTIME_FILES='${OPENVINO_RUNTIME_FILES}' OPENVINO_TBB_FILES='${OPENVINO_TBB_FILES}'")
+endif()
