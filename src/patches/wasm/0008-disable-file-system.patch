From 0000000000000000000000000000000000000000 Mon Dec 21 00:00:00 2000
Date: Mon, 21 Dec 2000 00:00:00 -0600
Subject: Disable any functions that calls file system APIs.

diff --git a/onnxruntime/core/graph/model.cc b/onnxruntime/core/graph/model.cc
index b3935e6..b0d1077 100644
--- a/onnxruntime/core/graph/model.cc
+++ b/onnxruntime/core/graph/model.cc
@@ -541,36 +541,8 @@ static Status LoadModel(const T& file_path, std::shared_ptr<Model>& p_model,
 
 template <typename T>
 static Status SaveModel(Model& model, const T& file_path) {
-#if defined(__wasm__) && defined(ORT_ENABLE_WEBASSEMBLY_OUTPUT_OPTIMIZED_MODEL)
-  ORT_RETURN_IF_ERROR(model.MainGraph().Resolve());
-  auto model_proto = model.ToProto();
-  auto buffer_size = model_proto.ByteSizeLong();
-  void* buffer = malloc(buffer_size);
-  model_proto.SerializeToArray(buffer, buffer_size);
-
-  EM_ASM(({
-           const buffer = $0;
-           const buffer_size = $1;
-           const file_path = UTF8ToString($2);
-           const bytes = new Uint8Array(buffer_size);
-           bytes.set(HEAPU8.subarray(buffer, buffer + buffer_size));
-           if (typeof process == 'object' && typeof process.versions == 'object' &&
-               typeof process.versions.node == 'string') {
-             // Node.js
-             require('fs').writeFileSync(file_path, bytes);
-           } else {
-             // Browser
-             const file = new File([bytes], file_path, {type: "application/octet-stream" });
-             const url = URL.createObjectURL(file);
-             window.open(url, '_blank');
-           }
-         }),
-         reinterpret_cast<int32_t>(buffer),
-         static_cast<int32_t>(buffer_size),
-         reinterpret_cast<int32_t>(file_path.c_str()));
-
-  free(buffer);
-  return Status::OK();
-
+#if defined(__wasm__)
+  return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
 #else
   int fd;
   Status status = Env::Default().FileOpenWr(file_path, fd);
@@ -687,6 +659,7 @@ using ::google::protobuf::io::FileInputStream;
 using ::google::protobuf::io::ZeroCopyInputStream;
 
 Status Model::Load(int fd, ONNX_NAMESPACE::ModelProto& model_proto) {
+#if !defined(__wasm__)
   if (fd < 0) {
     return Status(ONNXRUNTIME, INVALID_ARGUMENT, "<p_fd> less than 0.");
   }
@@ -718,6 +691,9 @@ Status Model::Load(int fd, ONNX_NAMESPACE::ModelProto& model_proto) {
   }
 #endif
   return Status::OK();
+#else
+  return Status(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
 }
 
 Status Model::Load(int fd, std::shared_ptr<Model>& p_model, const IOnnxRuntimeOpSchemaRegistryList* local_registries,
@@ -742,6 +718,7 @@ Status Model::Load(int fd, const PathString& model_path, std::shared_ptr<Model>&
 }
 
 Status Model::Save(Model& model, int p_fd) {
+#if !defined(__wasm__)
   if (p_fd < 0) {
     return Status(ONNXRUNTIME, INVALID_ARGUMENT, "<p_fd> is less than 0.");
   }
@@ -755,6 +732,9 @@ Status Model::Save(Model& model, int p_fd) {
     return Status::OK();
   }
   return Status(ONNXRUNTIME, INVALID_PROTOBUF, "Protobuf serialization failed.");
+#else
+  return Status(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
 }
 
 Status Model::SaveWithExternalInitializers(Model& model,
@@ -762,6 +742,7 @@ Status Model::SaveWithExternalInitializers(Model& model,
                                            int fd,
                                            const std::filesystem::path& file_path,
                                            const std::filesystem::path& external_file_name,
                                            size_t initializer_size_threshold) {
+#if !defined(__wasm__)
   if (fd < 0) {
     return Status(ONNXRUNTIME, INVALID_ARGUMENT, "<fd> is less than 0.");
   }
@@ -775,6 +756,9 @@ Status Model::SaveWithExternalInitializers(Model& model,
     return Status::OK();
   }
   return Status(ONNXRUNTIME, INVALID_PROTOBUF, "Protobuf serialization failed.");
+#else
+  return Status(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
 }
 
 common::Status Model::SaveToOrtFormat(flatbuffers::FlatBufferBuilder& builder,
diff --git a/onnxruntime/core/platform/path_lib.h b/onnxruntime/core/platform/path_lib.h
index a9d89f3..1dee6a1 100644
--- a/onnxruntime/core/platform/path_lib.h
+++ b/onnxruntime/core/platform/path_lib.h
@@ -320,6 +320,7 @@ inline OrtFileType DTToFileType(unsigned char t) {
 
 template <typename T>
 void LoopDir(const std::string& dir_name, T func) {
+#if !defined(__wasm__)
   DIR* dir = opendir(dir_name.c_str());
   if (dir == nullptr) {
     auto e = errno;
@@ -351,6 +352,7 @@ void LoopDir(const std::string& dir_name, T func) {
     ORT_RETHROW;
   }
   closedir(dir);
+#endif
 }
 #endif
 template <typename T>
diff --git a/onnxruntime/core/platform/posix/env.cc b/onnxruntime/core/platform/posix/env.cc
index 9999550..82026c9 100644
--- a/onnxruntime/core/platform/posix/env.cc
+++ b/onnxruntime/core/platform/posix/env.cc
@@ -62,6 +62,7 @@ class UnmapFileParam {
   size_t len;
 };
 
+#if !defined(__wasm__)
 static void UnmapFile(void* param) noexcept {
   std::unique_ptr<UnmapFileParam> p(reinterpret_cast<UnmapFileParam*>(param));
   int ret = munmap(p->addr, p->len);
@@ -70,6 +71,7 @@ static void UnmapFile(void* param) noexcept {
     LOGS_DEFAULT(ERROR) << "munmap failed. error code: " << err_no << " error msg: " << err_msg;
   }
 }
+#endif
 
 struct FileDescriptorTraits {
   using Handle = int;
@@ -99,6 +101,7 @@ long int TempFailureRetry(TFunc retriable_operation, TFuncArgs&&... args) {
 }
 
 // nftw() callback to remove a file
+#if !defined(__wasm__)
 int nftw_remove(
     const char* fpath, const struct stat* /*sb*/,
     int /*typeflag*/, struct FTW* /*ftwbuf*/) {
@@ -110,6 +113,7 @@ int nftw_remove(
   }
   return result;
 }
+#endif
 
 template <typename T>
 struct Freer {
@@ -263,7 +267,11 @@ class PosixEnv : public Env {
 
   // we are guessing the number of phys cores based on a popular HT case (2 logical proc per core)
   static int DefaultNumCores() {
+#ifdef __wasm__
+    return 1;
+#else
     return std::max(1, static_cast<int>(std::thread::hardware_concurrency() / 2));
+#endif
   }
 
   // Return the number of physical cores
@@ -328,11 +336,16 @@ class PosixEnv : public Env {
   }
 
   Status GetFileLength(const PathChar* file_path, size_t& length) const override {
+#if !defined(__wasm__)
     ScopedFileDescriptor file_descriptor{open(file_path, O_RDONLY)};
     return GetFileLength(file_descriptor.Get(), length);
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   common::Status GetFileLength(int fd, /*out*/ size_t& file_size) const override {
+#if !defined(__wasm__)
     using namespace common;
     if (fd < 0) {
       return ORT_MAKE_STATUS(ONNXRUNTIME, INVALID_ARGUMENT, "Invalid fd was supplied: ", fd);
@@ -354,10 +367,14 @@ class PosixEnv : public Env {
 
     file_size = static_cast<size_t>(buf.st_size);
     return Status::OK();
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   Status ReadFileIntoBuffer(const ORTCHAR_T* file_path, FileOffsetType offset, size_t length,
                             gsl::span<char> buffer) const override {
+#if !defined(__wasm__)
     ORT_RETURN_IF_NOT(file_path, "file_path == nullptr");
     ORT_RETURN_IF_NOT(offset >= 0, "offset < 0");
     ORT_RETURN_IF_NOT(length <= buffer.size(), "length > buffer.size()");
@@ -399,10 +416,14 @@ class PosixEnv : public Env {
     }
 
     return Status::OK();
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   Status MapFileIntoMemory(const ORTCHAR_T* file_path, FileOffsetType offset, size_t length,
                            MappedMemoryPtr& mapped_memory) const override {
+#if !defined(__wasm__)
     ORT_RETURN_IF_NOT(file_path, "file_path == nullptr");
     ORT_RETURN_IF_NOT(offset >= 0, "offset < 0");
 
@@ -432,6 +453,9 @@ class PosixEnv : public Env {
                         OrtCallbackInvoker{OrtCallback{UnmapFile, new UnmapFileParam{mapped_base, mapped_length}}}};
 
     return Status::OK();
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   static common::Status ReportSystemError(const char* operation_name, const std::string& path) {
@@ -442,14 +466,19 @@ class PosixEnv : public Env {
   }
 
   bool FolderExists(const std::string& path) const override {
+#if !defined(__wasm__)
     struct stat sb;
     if (stat(path.c_str(), &sb)) {
       return false;
     }
     return S_ISDIR(sb.st_mode);
+#else
+    return false;
+#endif
   }
 
   common::Status CreateFolder(const std::string& path) const override {
+#if !defined(__wasm__)
     size_t pos = 0;
     do {
       pos = path.find_first_of("\\/", pos + 1);
@@ -462,51 +491,75 @@ class PosixEnv : public Env {
       }
     } while (pos != std::string::npos);
     return Status::OK();
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   common::Status DeleteFolder(const PathString& path) const override {
+#if !defined(__wasm__)
     const auto result = nftw(
         path.c_str(), &nftw_remove, 32, FTW_DEPTH | FTW_PHYS);
     ORT_RETURN_IF_NOT(result == 0, "DeleteFolder(): nftw() failed with error: ", result);
     return Status::OK();
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   common::Status FileOpenRd(const std::string& path, /*out*/ int& fd) const override {
+#if !defined(__wasm__)
     fd = open(path.c_str(), O_RDONLY);
     if (0 > fd) {
       return ReportSystemError("open", path);
     }
     return Status::OK();
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   common::Status FileOpenWr(const std::string& path, /*out*/ int& fd) const override {
+#if !defined(__wasm__)
     fd = open(path.c_str(), O_WRONLY | O_CREAT | O_TRUNC, 0644);
     if (0 > fd) {
       return ReportSystemError("open", path);
     }
     return Status::OK();
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   common::Status FileClose(int fd) const override {
+#if !defined(__wasm__)
     int ret = close(fd);
     if (0 != ret) {
       return ReportSystemError("close", "");
     }
     return Status::OK();
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   common::Status GetCanonicalPath(
       const PathString& path,
       PathString& canonical_path) const override {
+#if !defined(__wasm__)
     MallocdStringPtr canonical_path_cstr{realpath(path.c_str(), nullptr), Freer<char>()};
     if (!canonical_path_cstr) {
       return ReportSystemError("realpath", path);
     }
     canonical_path.assign(canonical_path_cstr.get());
     return Status::OK();
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   common::Status LoadDynamicLibrary(const PathString& library_filename, bool global_symbols, void** handle) const override {
+#if !defined(__wasm__)
     dlerror();  // clear any old error_str
     *handle = dlopen(library_filename.c_str(), RTLD_NOW | (global_symbols ? RTLD_GLOBAL : RTLD_LOCAL));
     char* error_str = dlerror();
@@ -515,9 +568,13 @@ class PosixEnv : public Env {
                             "Failed to load library " + library_filename + " with error: " + error_str);
     }
     return common::Status::OK();
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   common::Status UnloadDynamicLibrary(void* handle) const override {
+#if !defined(__wasm__)
     if (!handle) {
       return common::Status(common::ONNXRUNTIME, common::FAIL, "Got null library handle");
     }
@@ -529,9 +586,13 @@ class PosixEnv : public Env {
                             "Failed to unload library with error: " + std::string(error_str));
     }
     return common::Status::OK();
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   common::Status GetSymbolFromLibrary(void* handle, const std::string& symbol_name, void** symbol) const override {
+#if !defined(__wasm__)
     dlerror();  // clear any old error str
 
     // search global space if handle is nullptr.
@@ -546,6 +607,9 @@ class PosixEnv : public Env {
     }
     // it's possible to get a NULL symbol in our case when Schemas are not custom.
     return common::Status::OK();
+#else
+    return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
   }
 
   std::string FormatLibraryFileName(const std::string& name, const std::string& version) const override {
diff --git a/onnxruntime/core/session/inference_session.cc b/onnxruntime/core/session/inference_session.cc
index c1cd215..d2e440a 100644
--- a/onnxruntime/core/session/inference_session.cc
+++ b/onnxruntime/core/session/inference_session.cc
@@ -829,6 +829,7 @@ common::Status InferenceSession::RegisterGraphTransformer(
 }
 
 common::Status InferenceSession::SaveToOrtFormat(const std::filesystem::path& filepath) const {
+#if !defined(__wasm__)
   // Get the byte size of the ModelProto and round it to the next MB and use it as flatbuffers' init_size
   // TODO: Investigate whether we should set a max size, and clarify the cost of having a buffer smaller than
   // what the total flatbuffers serialized size will be.
@@ -872,6 +873,9 @@ common::Status InferenceSession::SaveToOrtFormat(const PathString& filepath) con
   }
 
   return Status::OK();
+#else
+  return common::Status(common::ONNXRUNTIME, common::FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
 }
 
 common::Status InferenceSession::LoadWithLoader(std::function<common::Status(std::shared_ptr<Model>&)> loader,
@@ -1283,6 +1287,7 @@ common::Status InferenceSession::TransformGraph(onnxruntime::Graph& graph, bool
 static Status LoadOrtModelBytes(const PathString& model_uri,
                                 gsl::span<const uint8_t>& bytes,
                                 std::vector<uint8_t>& bytes_data_holder) {
+#if !defined(__wasm__)
   size_t num_bytes = 0;
   ORT_RETURN_IF_ERROR(Env::Default().GetFileLength(model_uri.c_str(), num_bytes));
 
@@ -1300,6 +1305,9 @@ static Status LoadOrtModelBytes(const PathString& model_uri,
   bytes = gsl::span<const uint8_t>(bytes_data_holder.data(), num_bytes);
 
   return Status::OK();
+#else
+  return common::Status(common::ONNXRUNTIME, common::FAIL, "(ort-rs) File system is not supported by wasm32-unknown-unknown.");
+#endif
 }
 
 Status InferenceSession::LoadOrtModel(const PathString& model_uri) {
