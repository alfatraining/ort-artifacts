name: Build Targets

on:
  workflow_call:
    inputs:
      onnxruntime-ref:
        type: string
        description: "ONNX Runtime repository reference"
        required: true
      buildtype:
        type: string
        description: "Build type (Debug or Release)"
        required: true
      target-preset:
        type: string
        description: "Target preset"
        required: true
      target-custom:
        type: string
        description: "Custom target filter"
        required: false

env:
  GCC_VERSION: '11'
  CMAKE_VERSION: '3.28'
  PYTHON_VERSION: '3.10'
  XCODE_VERSION: '14.3.1'

jobs:
  build:
    name: Build ort-${{ inputs.onnxruntime-ref }}-${{ matrix.target }}-${{ inputs.buildtype }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: dylib-aarch64-linux
            args: "-A aarch64 --xnnpack -N --openvino"
            runs-on: ubuntu-22.04
          - target: static-aarch64-linux
            args: "--static -A aarch64 --xnnpack -N --openvino"
            runs-on: ubuntu-22.04
          - target: dylib-x86_64-linux
            args: "--xnnpack -N --openvino"
            runs-on: ubuntu-22.04
          - target: static-x86_64-linux
            args: "--static --xnnpack -N --openvino"
            runs-on: ubuntu-22.04
          - target: dylib-aarch64-macos
            args: "-A aarch64 --xnnpack -N"
            runs-on: macos-14
          - target: static-aarch64-macos
            args: "--static -A aarch64 --xnnpack -N"
            runs-on: macos-14
          - target: dylib-x86_64-macos
            args: "--xnnpack -N"
            runs-on: macos-14
          - target: static-x86_64-macos
            args: "--static --xnnpack -N"
            runs-on: macos-14
          - target: dylib-x86_64-windows-msvc-md
            args: "--directml --xnnpack --openvino -N"
            runs-on: windows-2025
          - target: static-x86_64-windows-msvc-md
            args: "--static --directml --xnnpack --openvino -N"
            runs-on: windows-2025
          - target: dylib-x86_64-windows-msvc-mt
            args: "--mt --directml --xnnpack --openvino -N"
            runs-on: windows-2025
          - target: static-x86_64-windows-msvc-mt
            args: "--static --mt --directml --xnnpack --openvino -N"
            runs-on: windows-2025
          - target: wasm32-emscripten
            args: "-W --webgpu"
            runs-on: ubuntu-22.04
          - target: dylib-aarch64-ios
            args: "-A aarch64 --iphoneos --xnnpack --coreml -N"
            runs-on: macos-14
          - target: static-aarch64-ios
            args: "--static --iphoneos -A aarch64 --xnnpack --coreml -N"
            runs-on: macos-14
          - target: dylib-aarch64-ios-simulator
            args: "-A aarch64 --iphonesimulator --xnnpack --coreml -N"
            runs-on: macos-14
          - target: static-aarch64-ios-simulator
            args: "--static --iphonesimulator -A aarch64 --xnnpack --coreml -N"
            runs-on: macos-14
          - target: dylib-aarch64-android
            args: "--android -A aarch64 --xnnpack --nnapi -N"
            runs-on: ubuntu-22.04
          - target: static-aarch64-android
            args: "--static --android -A aarch64 --xnnpack --nnapi -N"
            runs-on: ubuntu-22.04

    steps:
      - name: Free Disk Space (Ubuntu)
        if: >
          contains(matrix.runs-on, 'ubuntu') &&
          (
            (inputs.target-custom != '' && (inputs.target-custom == 'all' || contains(matrix.target, inputs.target-custom))) ||
            (inputs.target-custom == '' && (inputs.target-preset == 'all' || contains(matrix.target, inputs.target-preset)))
          )
        uses: ChrisCarini/free-disk-space@main
        with:
          tool-cache: false
          android: ${{ !contains(matrix.target, 'android') }}
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: true
          swap-storage: true

      - name: Install cross-compilation tools
        if: ((inputs.target-custom != '' && (inputs.target-custom == 'all' || contains(matrix.target, inputs.target-custom))) || (inputs.target-custom == '' && (inputs.target-preset == 'all' || contains(matrix.target, inputs.target-preset)))) && (matrix.target == 'dylib-aarch64-linux' || matrix.target == 'static-aarch64-linux')
        run: |
          # Install basic build tools
          sudo apt update && sudo apt install -y make ninja-build wget xz-utils

          # Download and install ARM GNU Toolchain with GCC 11.3
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu/11.3.rel1/binrel/arm-gnu-toolchain-11.3.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
          sudo mkdir -p /opt/linaro-toolchain
          sudo tar -xf arm-gnu-toolchain-11.3.rel1-x86_64-aarch64-none-linux-gnu.tar.xz -C /opt/linaro-toolchain --strip-components=1
          rm arm-gnu-toolchain-11.3.rel1-x86_64-aarch64-none-linux-gnu.tar.xz

          # Add toolchain to PATH and create symlinks for compatibility
          echo "/opt/linaro-toolchain/bin" >> $GITHUB_PATH
          sudo ln -sf /opt/linaro-toolchain/bin/aarch64-none-linux-gnu-gcc /usr/bin/aarch64-none-linux-gnu-gcc
          sudo ln -sf /opt/linaro-toolchain/bin/aarch64-none-linux-gnu-g++ /usr/bin/aarch64-none-linux-gnu-g++

      - uses: actions/checkout@v4
        if: (inputs.target-custom != '' && (inputs.target-custom == 'all' || contains(matrix.target, inputs.target-custom))) || (inputs.target-custom == '' && (inputs.target-preset == 'all' || contains(matrix.target, inputs.target-preset)))

      - uses: actions/setup-java@v4
        if: ((inputs.target-custom != '' && (inputs.target-custom == 'all' || contains(matrix.target, inputs.target-custom))) || (inputs.target-custom == '' && (inputs.target-preset == 'all' || contains(matrix.target, inputs.target-preset)))) && (matrix.target == 'dylib-aarch64-android' || matrix.target == 'static-aarch64-android')
        with:
          java-version: "17"
          distribution: "temurin"

      - uses: android-actions/setup-android@v3
        if: ((inputs.target-custom != '' && (inputs.target-custom == 'all' || contains(matrix.target, inputs.target-custom))) || (inputs.target-custom == '' && (inputs.target-preset == 'all' || contains(matrix.target, inputs.target-preset)))) && (matrix.target == 'dylib-aarch64-android' || matrix.target == 'static-aarch64-android')

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        if: ((inputs.target-custom != '' && (inputs.target-custom == 'all' || contains(matrix.target, inputs.target-custom))) || (inputs.target-custom == '' && (inputs.target-preset == 'all' || contains(matrix.target, inputs.target-preset)))) && (matrix.target == 'dylib-aarch64-android' || matrix.target == 'static-aarch64-android')
        with:
          add-to-path: false
          ndk-version: r28

      - uses: JW-AV/install-openvino-action@v10.1
        if: contains(matrix.args, '--openvino') && ((inputs.target-custom != '' && (inputs.target-custom == 'all' || contains(matrix.target, inputs.target-custom))) || (inputs.target-custom == '' && (inputs.target-preset == 'all' || contains(matrix.target, inputs.target-preset))))
        with:
          version: "2025.2"
          arch: ${{ contains(matrix.target, 'aarch64') && 'arm64' || 'x86_64' }}
          release: ${{ (contains(matrix.target, 'linux') && (contains(matrix.target, 'aarch64') && 'ubuntu20' || 'ubuntu22') || 'ubuntu22') || '' }}

      - name: Ubuntu GCC 11 setup
        if: contains(matrix.runs-on, 'ubuntu-24')
        shell: bash
        run: |
          sudo apt install gcc-11 g++-11
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 70 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11

      - name: Install clang
        if: contains(matrix.target, 'linux')
        shell: bash
        run: |
          sudo apt install clang

      - name: Run build
        if: >
          (inputs.target-custom != '' && (inputs.target-custom == 'all' || contains(matrix.target, inputs.target-custom))) ||
          (inputs.target-custom == '' && (inputs.target-preset == 'all' || contains(matrix.target, inputs.target-preset)))
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          CMAKE_SYSROOT: ${{ (matrix.target == 'dylib-aarch64-linux' || matrix.target == 'static-aarch64-linux') && '/opt/linaro-toolchain/aarch64-none-linux-gnu/libc' || '' }}
          CMAKE_FIND_ROOT_PATH: ${{ (matrix.target == 'dylib-aarch64-linux' || matrix.target == 'static-aarch64-linux') && '/opt/linaro-toolchain/aarch64-none-linux-gnu' || '' }}
          TARGET_LINUX: ${{ contains(matrix.target, 'linux') && 'true' || 'false' }}
        shell: bash
        run: |
          ./build.sh -r "${{ inputs.onnxruntime-ref }}" -b "${{ inputs.buildtype }}" ${{ matrix.args }}

      # See: https://github.com/microsoft/onnxruntime/issues/24911
      # - name: Remove executable stack flag
      #   if: ((inputs.target-custom != '' && (inputs.target-custom == 'all' || contains(matrix.target, inputs.target-custom))) || (inputs.target-custom == '' && (inputs.target-preset == 'all' || contains(matrix.target, inputs.target-preset)))) && (matrix.target == 'dylib-x86_64-linux' || matrix.target == 'dylib-aarch64-linux' || matrix.target == 'dylib-aarch64-android')
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y patchelf
      #     # patchelf --clear-execstack build/artifact/onnxruntime/lib/libonnxruntime_sx${{ (inputs.buildtype == 'Debug') && 'd' || '' }}.so
      #     execstack -c build/artifact/onnxruntime/lib/libonnxruntime_sx${{ (inputs.buildtype == 'Debug') && 'd' || '' }}.so

      - name: Fix OpenVINO linux rpath
        # NOTE: The version in the file path below must match the version for the `install-openvino-action` above
        if: >
          contains(matrix.args, '--openvino') && contains(matrix.target, 'linux') &&
          (
            (inputs.target-custom != '' && (inputs.target-custom == 'all' || contains(matrix.target, inputs.target-custom))) ||
            (inputs.target-custom == '' && (inputs.target-preset == 'all' || contains(matrix.target, inputs.target-preset)))
          )
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y patchelf
          patchelf --set-rpath '$ORIGIN' build/artifact/onnxruntime/lib/libopenvino.so.2025.2.0

      # Create archive based on target OS
      - name: Create artifact (.zip or .tar.gz)
        if: (inputs.target-custom != '' && (inputs.target-custom == 'all' || contains(matrix.target, inputs.target-custom))) || (inputs.target-custom == '' && (inputs.target-preset == 'all' || contains(matrix.target, inputs.target-preset)))
        run: |
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            pushd build/artifact
            7z a -tzip $(dirs +1 -l)/ort-${{ inputs.onnxruntime-ref }}-${{ matrix.target }}-${{ inputs.buildtype }}.zip
            popd
          else
            pushd build/artifact
            zip -y -r $(dirs +1 -l)/ort-${{ inputs.onnxruntime-ref }}-${{ matrix.target }}-${{ inputs.buildtype }}.zip .
            popd
          fi
        shell: bash

      - name: Upload artifact
        if: (inputs.target-custom != '' && (inputs.target-custom == 'all' || contains(matrix.target, inputs.target-custom))) || (inputs.target-custom == '' && (inputs.target-preset == 'all' || contains(matrix.target, inputs.target-preset)))
        uses: actions/upload-artifact@v4
        with:
          name: ort-${{ inputs.onnxruntime-ref }}-${{ matrix.target }}-${{ inputs.buildtype }}
          path: 'ort-${{ inputs.onnxruntime-ref }}-${{ matrix.target }}-${{ inputs.buildtype }}.zip'
          if-no-files-found: error
