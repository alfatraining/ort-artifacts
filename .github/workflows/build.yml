name: Build
on:
  workflow_dispatch:
    inputs:
      onnxruntime-ref:
        type: string
        description: "ONNX Runtime repository reference, e.g., 'rel-1.22.1' or 'main'"
        default: main
env:
  GCC_VERSION: '11'
  CMAKE_VERSION: '3.28'
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'
  XCODE_VERSION: '14.3.1'
  MACOSX_DEPLOYMENT_TARGET: '12.0' # Should be 13.3 according to https://github.com/microsoft/onnxruntime/releases/tag/v1.21.0. But due to internal constraints, we must target 12.
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: dylib-aarch64-unknown-linux-gnu
            args: "-A aarch64 --xnnpack --webgpu -N"
            runs-on: ubuntu-24.04
            arch: "arm64" # Defined again for OpenVINO setup.
            release: "ubuntu20" # Defined for OpenVINO setup.
          - target: static-aarch64-unknown-linux-gnu
            args: "--static -A aarch64 --xnnpack --webgpu -N"
            runs-on: ubuntu-24.04
            arch: "arm64"
            release: "ubuntu20"
          - target: dylib-x86_64-unknown-linux-gnu
            args: "--xnnpack --webgpu -N"
            runs-on: ubuntu-24.04
            arch: "x86_64"
          - target: static-x86_64-unknown-linux-gnu
            args: "--static --xnnpack --webgpu -N"
            runs-on: ubuntu-24.04
            arch: "x86_64"
          - target: dylib-aarch64-apple-darwin
            args: "-A aarch64 --xnnpack --webgpu -N" # CoreML requires macOS 13 or newer.
            runs-on: macos-13
            arch: "arm64"
          - target: static-aarch64-apple-darwin
            args: "--static -A aarch64 --xnnpack --webgpu -N"
            runs-on: macos-13
            arch: "arm64"
          - target: dylib-x86_64-apple-darwin
            args: "--xnnpack --webgpu -N"
            runs-on: macos-13
            arch: "x86_64"
          - target: static-x86_64-apple-darwin
            args: "--static --xnnpack --webgpu -N"
            runs-on: macos-13
            arch: "x86_64"
          - target: dylib-x86_64-pc-windows-msvc-md
            args: "--directml --xnnpack --webgpu"
            runs-on: windows-2025
            arch: "x86_64"
          - target: static-x86_64-pc-windows-msvc-md
            args: "--static --directml --xnnpack --webgpu"
            runs-on: windows-2025
            arch: "x86_64"
          - target: dylib-x86_64-pc-windows-msvc-mt
            args: "--mt --directml --xnnpack --webgpu"
            runs-on: windows-2025
            arch: "x86_64"
          - target: static-x86_64-pc-windows-msvc-mt
            args: "--static --mt --directml --xnnpack --webgpu"
            runs-on: windows-2025
            arch: "x86_64"
          - target: wasm32-unknown-emscripten
            args: "-W --webgpu"
            runs-on: ubuntu-24.04
            arch: "wasm32"
    steps:
      - name: Install cross-compile tools
        if: matrix.target == 'dylib-aarch64-unknown-linux-gnu' || matrix.target == 'static-aarch64-unknown-linux-gnu'
        run: |
          sudo apt update && sudo apt install -y gcc make gcc-11-aarch64-linux-gnu g++-11-aarch64-linux-gnu binutils-aarch64-linux-gnu
      - name: Remove unnecessary software
        if: runner.os == 'Linux'
        run: |
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
      - uses: actions/checkout@v4
      - uses: seanmiddleditch/gha-setup-ninja@v6
      # Following does not yet work on Ubuntu 24.04!
      # - uses: abrown/install-openvino-action@v9
      #   if: matrix.arch == 'x86_64' || matrix.arch == 'arm64'
      #   with:
      #     version: "2024.5"
      #     arch: ${{ matrix.arch }}
      #     release: ${{ matrix.release }}
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - name: Run builder
        run:
          deno run -A src/build.ts -r ${{ inputs.onnxruntime-ref }} ${{ matrix.args }}
      # See: https://github.com/microsoft/onnxruntime/issues/24911
      - name: Remove executable stack flag
        if: matrix.target == 'dylib-x86_64-unknown-linux-gnu' || matrix.target == 'dylib-aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y patchelf
          patchelf --clear-execstack artifact/onnxruntime/lib/libonnxruntime_sx.so
      - uses: actions/upload-artifact@v4
        with:
          name: ort-${{ inputs.onnxruntime-ref }}-${{ matrix.target }}
          path: artifact
          if-no-files-found: error
